[{"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\index.js":"1","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\App.js":"2","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\loginform.js":"3","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\Form-Registration\\Form.js":"4","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\login.js":"5","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\Form-Registration\\FormReg.js":"6","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\validateLoginInfo.js":"7","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\useLoginForm.js":"8","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\Form-Registration\\useForm.js":"9","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\Form-Registration\\SchemaReg.js":"10"},{"size":250,"mtime":1609895549165,"results":"11","hashOfConfig":"12"},{"size":329,"mtime":1609895692072,"results":"13","hashOfConfig":"12"},{"size":827,"mtime":1609888180169,"results":"14","hashOfConfig":"12"},{"size":188,"mtime":1609895280343,"results":"15","hashOfConfig":"12"},{"size":2163,"mtime":1609888081498,"results":"16","hashOfConfig":"12"},{"size":2004,"mtime":1609895135793,"results":"17","hashOfConfig":"12"},{"size":494,"mtime":1609888081761,"results":"18","hashOfConfig":"12"},{"size":850,"mtime":1609888081700,"results":"19","hashOfConfig":"12"},{"size":1683,"mtime":1609895135794,"results":"20","hashOfConfig":"12"},{"size":350,"mtime":1609895135793,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"iwyttu",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\index.js",[],["48","49"],"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\App.js",["50"],"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\loginform.js",["51","52"],"import React, { useState } from 'react'\r\nimport Login from './login'\r\nimport './loginForm.css'\r\n\r\nconst LoginForm = () => {\r\n    const [isSubmitted, setIsSubmitted] = useState(false)\r\n\r\n    function submitForm() {\r\n        setIsSubmitted(true);\r\n    }\r\n    return (\r\n        <>\r\n        <div className='form-container'>\r\n            <span className='close-btn'>x</span>\r\n            <div className='form-content-left'>\r\n                <img className='form-img' src='img/pintereach.png' alt='logo' />\r\n            </div>\r\n            <Login />\r\n            {/* THE ABOVE LINE WILL BE REMOVED ONCE THE BELOW LOGIC IS COMPLETE */}\r\n            {/* {!isSubmitted ? <Login submitForm={submitForm} /> : TO DO - INSERT CODE TO MOVE ON TO ARTICLES AFTER LOGIN} */}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\Form-Registration\\Form.js",[],"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\login.js",["53"],"import React from 'react';\r\nimport useLoginForm from './useLoginForm';\r\nimport validate from './validateLoginInfo';\r\nimport './loginForm.css';\r\n\r\nconst Login = ({submitForm}) => {\r\n    const { handleChange, values, handleSubmit, errors } = useLoginForm(submitForm, validate);\r\n\r\n    return (\r\n        <div className='form-content-right'>\r\n            <form className='form' onSubmit={handleSubmit}>\r\n                <h1>Welcome back to Pintereach! Please login below.</h1>\r\n                <div className='form-inputs'>\r\n                    <label \r\n                    htmlFor='email' \r\n                    className='form-label'\r\n                    >Email\r\n                    </label>\r\n                    <input\r\n                    id='email'\r\n                    type='email' \r\n                    name='email' \r\n                    className='form-input'\r\n                    placeholder='Enter your email'\r\n                    value={values.email}\r\n                    onChange={handleChange}\r\n                    />\r\n                    {errors.email && <p>{errors.email}</p>}\r\n                </div>\r\n                <div className='form-inputs'>\r\n                    <label \r\n                    htmlFor='password' \r\n                    className='form-label'\r\n                    >Password\r\n                    </label>\r\n                    <input\r\n                    id='password'\r\n                    type='password' \r\n                    name='password' \r\n                    className='form-input'\r\n                    placeholder='Enter your password'\r\n                    value={values.password}\r\n                    onChange={handleChange}\r\n                    />\r\n                    {errors.password && <p>{errors.password}</p>}\r\n                </div>\r\n                <button \r\n                className='form-input-btn' \r\n                type='submit'\r\n                >Log In\r\n                </button>\r\n                <span \r\n                className='form-input-login'\r\n                >Need an account? Sign up <a href='#'>here</a>\r\n                </span>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\Form-Registration\\FormReg.js",["54"],"import React from 'react';\r\nimport useForm from './useForm';\r\n\r\n\r\nexport default function FormReg(){\r\n\r\n    const { changeReg, formValues, submitRegForm, formErrors } = useForm();\r\n\r\n    // const onSubmit = (evt) => {\r\n    //     evt.preventDefault();\r\n    //     submitReg();\r\n    // };\r\n\r\n\r\n    // const onChange = evt => {\r\n    //     const { name } = evt.target;\r\n    //     changeReg( name );\r\n    // }\r\n\r\n    return(\r\n        <div className='form-content-right'>\r\n            <form onSubmit={submitRegForm} className='form'>\r\n                <h1>Register Today!</h1> \r\n                <label>Name\r\n                    <input \r\n                    type='text'\r\n                    name='name'\r\n                    placeholder='Enter your name'\r\n                    value={formValues.name}\r\n                    onChange={changeReg}\r\n                    />\r\n                </label>\r\n                <div>\r\n                    <p>{formErrors.name}</p>\r\n                </div>\r\n                <label>Email\r\n                    <input \r\n                    type='email'\r\n                    name='email'\r\n                    placeholder='Enter your email'\r\n                    value={formValues.email}\r\n                    onChange={changeReg}\r\n                    />\r\n                </label>\r\n                <div>\r\n                    <p>{formErrors.email}</p>\r\n                </div>\r\n                <label>Password\r\n                    <input \r\n                    type='password'\r\n                    name='password'\r\n                    placeholder='Enter your password'\r\n                    value={formValues.password}\r\n                    onChange={changeReg}\r\n                    />\r\n                </label>\r\n                <div>\r\n                    <p>{formErrors.password}</p>\r\n                </div>\r\n                <button>Sign Up</button>\r\n                <span>Already have an account? Login <a href='#'>here</a>.</span>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\validateLoginInfo.js",[],"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\useLoginForm.js",["55","56"],"import { useState, useEffect } from 'react';\r\n\r\nconst useLoginForm = (callback, validate) => {\r\n    const [values, setValues] = useState({\r\n        email:'',\r\n        password:''\r\n    });\r\n    const [errors, setErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false)\r\n\r\n    const handleChange = e => {\r\n        const {name, value} = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        });\r\n    };\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        setErrors(validate(values));\r\n        isSubmitting(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(errors).length === 0 && isSubmitting) {\r\n            callback();\r\n        }\r\n    },[errors]);\r\n\r\n    return { handleChange, values, handleSubmit, errors };\r\n};\r\n\r\nexport default useLoginForm;","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\Form-Registration\\useForm.js",["57","58","59","60","61","62","63"],"import React, { useState, useEffect } from 'react';\r\nimport { Route, Link } from 'react-router-dom';\r\nimport * as yup from 'yup';\r\nimport axios from 'axios';\r\n\r\nimport FormReg from './FormReg';\r\nimport SchemaReg from './SchemaReg';\r\n\r\n\r\n\r\nconst defaultValues = {\r\n    name:'',\r\n    email:'',\r\n    password:'',\r\n  };\r\n  const defaultErrors = {\r\n    name:'',\r\n    email:'',\r\n    password:'',\r\n  };\r\n  const initialUser = [];\r\n  const initialDisable = true;\r\n\r\nexport default function useForm() {\r\n  const [user, setUser] = useState(initialUser);\r\n  const [formValues, setFormValues] = useState(defaultValues);\r\n  const [formErrors, setFormErrors] = useState(defaultErrors);\r\n  const [disable, setDisable] = useState(initialDisable);\r\n\r\n  const postNewUser = (newUser) => {\r\n      axios\r\n      .post(\"/api/auth/register\", newUser)\r\n      .then((res) => {\r\n          setUser([res.data, ...user]);\r\n          setFormValues(defaultValues);\r\n      })\r\n      .catch((err) => {\r\n          console.log(err);\r\n      });\r\n  }\r\n\r\n  const changeReg = (evt) => {\r\n      const { name, value } = evt.target;\r\n    yup\r\n    .reach(SchemaReg, name)\r\n    .validate(value)\r\n    .then(() => {\r\n      setFormErrors({...formErrors, [name]: ''});\r\n    })\r\n    .catch((err) => {\r\n      setFormErrors({...formErrors, [name]: err.errors[0]});\r\n    })\r\n    setFormValues({...formValues, [name]: value});\r\n    \r\n  };\r\n\r\n  const submitRegForm = (evt) =>{\r\n      evt.preventDefault();\r\n    const newUser = {\r\n      name:formValues.name,\r\n      email:formValues.email,\r\n      password:formValues.password,\r\n    };\r\n    postNewUser(newUser);\r\n}\r\nreturn ( { changeReg , formValues, submitRegForm, formErrors }); \r\n\r\n}\r\n","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\Form-Registration\\SchemaReg.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":4,"column":8,"nodeType":"70","messageId":"71","endLine":4,"endColumn":13},{"ruleId":"68","severity":1,"message":"72","line":6,"column":12,"nodeType":"70","messageId":"71","endLine":6,"endColumn":23},{"ruleId":"68","severity":1,"message":"73","line":8,"column":14,"nodeType":"70","messageId":"71","endLine":8,"endColumn":24},{"ruleId":"74","severity":1,"message":"75","line":54,"column":43,"nodeType":"76","endLine":54,"endColumn":55},{"ruleId":"74","severity":1,"message":"75","line":61,"column":54,"nodeType":"76","endLine":61,"endColumn":66},{"ruleId":"68","severity":1,"message":"77","line":9,"column":26,"nodeType":"70","messageId":"71","endLine":9,"endColumn":41},{"ruleId":"78","severity":1,"message":"79","line":30,"column":7,"nodeType":"80","endLine":30,"endColumn":15,"suggestions":"81"},{"ruleId":"68","severity":1,"message":"82","line":1,"column":8,"nodeType":"70","messageId":"71","endLine":1,"endColumn":13},{"ruleId":"68","severity":1,"message":"83","line":1,"column":27,"nodeType":"70","messageId":"71","endLine":1,"endColumn":36},{"ruleId":"68","severity":1,"message":"84","line":2,"column":10,"nodeType":"70","messageId":"71","endLine":2,"endColumn":15},{"ruleId":"68","severity":1,"message":"85","line":2,"column":17,"nodeType":"70","messageId":"71","endLine":2,"endColumn":21},{"ruleId":"68","severity":1,"message":"86","line":6,"column":8,"nodeType":"70","messageId":"71","endLine":6,"endColumn":15},{"ruleId":"68","severity":1,"message":"87","line":28,"column":10,"nodeType":"70","messageId":"71","endLine":28,"endColumn":17},{"ruleId":"68","severity":1,"message":"88","line":28,"column":19,"nodeType":"70","messageId":"71","endLine":28,"endColumn":29},"no-native-reassign",["89"],"no-negated-in-lhs",["90"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'isSubmitted' is assigned a value but never used.","'submitForm' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setIsSubmitting' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["91"],"'React' is defined but never used.","'useEffect' is defined but never used.","'Route' is defined but never used.","'Link' is defined but never used.","'FormReg' is defined but never used.","'disable' is assigned a value but never used.","'setDisable' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"92","fix":"93"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"94","text":"95"},[742,750],"[callback, errors, isSubmitting]"]