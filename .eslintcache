[{"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\index.js":"1","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\App.js":"2","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\loginform.js":"3","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\login.js":"4","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\useLoginForm.js":"5","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\validateLoginInfo.js":"6"},{"size":207,"mtime":1609888081385,"results":"7","hashOfConfig":"8"},{"size":211,"mtime":1609888743092,"results":"9","hashOfConfig":"8"},{"size":827,"mtime":1609888180169,"results":"10","hashOfConfig":"8"},{"size":2163,"mtime":1609888081498,"results":"11","hashOfConfig":"8"},{"size":850,"mtime":1609888081700,"results":"12","hashOfConfig":"8"},{"size":494,"mtime":1609888081761,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"iwyttu",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"16"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\index.js",[],["30","31"],"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\App.js",[],"C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\loginform.js",["32","33"],"import React, { useState } from 'react'\r\nimport Login from './login'\r\nimport './loginForm.css'\r\n\r\nconst LoginForm = () => {\r\n    const [isSubmitted, setIsSubmitted] = useState(false)\r\n\r\n    function submitForm() {\r\n        setIsSubmitted(true);\r\n    }\r\n    return (\r\n        <>\r\n        <div className='form-container'>\r\n            <span className='close-btn'>x</span>\r\n            <div className='form-content-left'>\r\n                <img className='form-img' src='img/pintereach.png' alt='logo' />\r\n            </div>\r\n            <Login />\r\n            {/* THE ABOVE LINE WILL BE REMOVED ONCE THE BELOW LOGIC IS COMPLETE */}\r\n            {/* {!isSubmitted ? <Login submitForm={submitForm} /> : TO DO - INSERT CODE TO MOVE ON TO ARTICLES AFTER LOGIN} */}\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LoginForm;\r\n","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\login.js",["34"],"import React from 'react';\r\nimport useLoginForm from './useLoginForm';\r\nimport validate from './validateLoginInfo';\r\nimport './loginForm.css';\r\n\r\nconst Login = ({submitForm}) => {\r\n    const { handleChange, values, handleSubmit, errors } = useLoginForm(submitForm, validate);\r\n\r\n    return (\r\n        <div className='form-content-right'>\r\n            <form className='form' onSubmit={handleSubmit}>\r\n                <h1>Welcome back to Pintereach! Please login below.</h1>\r\n                <div className='form-inputs'>\r\n                    <label \r\n                    htmlFor='email' \r\n                    className='form-label'\r\n                    >Email\r\n                    </label>\r\n                    <input\r\n                    id='email'\r\n                    type='email' \r\n                    name='email' \r\n                    className='form-input'\r\n                    placeholder='Enter your email'\r\n                    value={values.email}\r\n                    onChange={handleChange}\r\n                    />\r\n                    {errors.email && <p>{errors.email}</p>}\r\n                </div>\r\n                <div className='form-inputs'>\r\n                    <label \r\n                    htmlFor='password' \r\n                    className='form-label'\r\n                    >Password\r\n                    </label>\r\n                    <input\r\n                    id='password'\r\n                    type='password' \r\n                    name='password' \r\n                    className='form-input'\r\n                    placeholder='Enter your password'\r\n                    value={values.password}\r\n                    onChange={handleChange}\r\n                    />\r\n                    {errors.password && <p>{errors.password}</p>}\r\n                </div>\r\n                <button \r\n                className='form-input-btn' \r\n                type='submit'\r\n                >Log In\r\n                </button>\r\n                <span \r\n                className='form-input-login'\r\n                >Need an account? Sign up <a href='#'>here</a>\r\n                </span>\r\n            </form>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Login\r\n","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\useLoginForm.js",["35","36"],"import { useState, useEffect } from 'react';\r\n\r\nconst useLoginForm = (callback, validate) => {\r\n    const [values, setValues] = useState({\r\n        email:'',\r\n        password:''\r\n    });\r\n    const [errors, setErrors] = useState({});\r\n    const [isSubmitting, setIsSubmitting] = useState(false)\r\n\r\n    const handleChange = e => {\r\n        const {name, value} = e.target\r\n        setValues({\r\n            ...values,\r\n            [name]: value\r\n        });\r\n    };\r\n    \r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        setErrors(validate(values));\r\n        isSubmitting(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (Object.keys(errors).length === 0 && isSubmitting) {\r\n            callback();\r\n        }\r\n    },[errors]);\r\n\r\n    return { handleChange, values, handleSubmit, errors };\r\n};\r\n\r\nexport default useLoginForm;","C:\\Users\\Tara\\Documents\\GitHub\\lambda-assignments\\frontend\\src\\validateLoginInfo.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":6,"column":12,"nodeType":"43","messageId":"44","endLine":6,"endColumn":23},{"ruleId":"41","severity":1,"message":"45","line":8,"column":14,"nodeType":"43","messageId":"44","endLine":8,"endColumn":24},{"ruleId":"46","severity":1,"message":"47","line":54,"column":43,"nodeType":"48","endLine":54,"endColumn":55},{"ruleId":"41","severity":1,"message":"49","line":9,"column":26,"nodeType":"43","messageId":"44","endLine":9,"endColumn":41},{"ruleId":"50","severity":1,"message":"51","line":30,"column":7,"nodeType":"52","endLine":30,"endColumn":15,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"no-unused-vars","'isSubmitted' is assigned a value but never used.","Identifier","unusedVar","'submitForm' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'setIsSubmitting' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'callback' and 'isSubmitting'. Either include them or remove the dependency array. If 'callback' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["56"],"no-global-assign","no-unsafe-negation",{"desc":"57","fix":"58"},"Update the dependencies array to be: [callback, errors, isSubmitting]",{"range":"59","text":"60"},[742,750],"[callback, errors, isSubmitting]"]